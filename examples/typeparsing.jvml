type 'a tree = Lf of 'a
type data = X of int -> int tree
type data2 = Y of (int -> int) tree

type intlist = N | C of (int * intlist)
type 'a list = N1 | C1 of ('a * 'a list)
type ('k, 'v) dict = N2 | C2 of ('k * 'v * ('k, 'v) dict)

val x = N
val z = C1 ((0, true), C1 ((2,false), N1))

type 'a l = P | Q of 'a l
val q = P