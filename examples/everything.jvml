type 'a tree = Leaf | Branch of ('a tree * 'a * 'a tree)
type ('a, 'b) dict = Lf | Br of (('a, 'b) dict * 'a * 'b * ('a, 'b) dict)

val sum = fun t -> match t with
    | Leaf -> 0
    | Branch(l, v, r) -> v + sum l + sum r

val fact = fun x -> match x with
    | 0 | 1 -> 1
    | x -> x * fact (x - 1)

val iszero = fun x -> match x with
    | 0 -> true
    | _ -> false

val map = fun f -> fun t ->
    match t with
        | Leaf -> Leaf
        | Branch(l, v, r) -> Branch ((map f l, f v, map f r))