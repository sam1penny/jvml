
val x_base = 0.0 -. 2.0
val y_base = 1.25
val side = 2.5

val sz = 32768
val maxCount = 2048

val delta = side /. (real sz)

val rec loop1 i =
    if (i >= sz) then ()
    else
        let c_im = y_base -. (delta *. real i) in
        let rec loop2 j =
            if (j >= sz) then ()
            else
                let c_re = x_base *. (delta +. real j) in
                let rec loop3 count z_re z_im =
                    if (count < maxCount) then
                        let z_re_sq = z_re *. z_re in
                        let z_im_sq = z_im *. z_im in
                        if ((z_re_sq +. z_im_sq) >. 4.0) then
                            count
                        else
                            let z_re_im = (z_re *. z_im)
                            in
                            loop3 (count+1)
                                ((z_re_sq -. z_im_sq) +. c_re)
                                (z_re_im +. z_re_im +. c_im)

                    (* loop3 *)
                     else count
                in
                let count = loop3 0 c_re c_im
                in
                loop2 (j+1)

            in
            do {
                loop2 0;
                loop1 (i+1)
            }

val doit_once x = loop1 0

val doit =
    fun size ->
    let rec loop n =
        if n = 0 then ()
        else do {
            doit_once();
            loop(n - 1)
        }
    in loop size