val rec quick = fun ts -> fun sorted ->
    match ts with
        | [] -> sorted
        | [x]  -> x :: sorted
        | (x :: xs) -> (
            let rec part = fun l -> fun r -> fun u ->
                match u with
                    | [] -> quick l (x :: (quick r sorted))
                    | (y::ys) -> (
                        if ((y < x) || (y = x)) then
                            part (y::l) r ys
                        else
                            part l (y::r) ys
                    )
            in
            part [] [] xs
        )

val quicksort = fun l -> quick l []

val x = [3; 2; 1]

val doit_once = fun dead ->
    quicksort x

val doit = fun size ->
    let rec loop n =
        if n = 0 then ()
        else do {
            doit_once ();
            loop (n - 1)
        }
    in
    loop size

val testit dead = print(doit_once x)